service: basicapi

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.config.settings.deployRegion}
  profile: default
  stage: default

# Custom configuration properties go in their own file
# We use a custom packager to fully customize lambda packages
custom:
  config: ${file(config.yml)}
  scripts:
    hooks:
      'after:package:createDeploymentArtifacts': npm run customPackager
  customDomain:
    domainName: api.authguidance-examples.com
    certificateName: '*.authguidance-examples.com'
    basePath: api
    stage: ${self:provider.stage}
    endpointType: regional

functions:
  # The custom authorizer has extra OAuth related dependencies
  authorize:
    handler: js/authorizer/handler.authorize
    cors:
      origin: ${self:custom.config.settings.trustedOrigin}
    package:
      individually: true

  # The other lambdas reference the authorizer lambda
  getUserClaims:
    handler: js/service/handler.getUserClaims
    events:
      - http: 
          path: /userclaims/current
          method: get
          authorizer:
            name: authorize
            resultTtlInSeconds: ${self:custom.config.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.config.settings.trustedOrigin}

  getCompanyList:
    handler: js/service/handler.getCompanyList
    events:
      - http: 
          path: /companies
          method: get
          authorizer:
            name: authorize
            resultTtlInSeconds: ${self:custom.config.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.config.settings.trustedOrigin}

  getCompanyTransactions:
    handler: js/service/handler.getCompanyTransactions
    events:
      - http: 
          path: /companies/{id}/transactions
          method: get
          authorizer:
            name: authorize
            resultTtlInSeconds: ${self:custom.config.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.config.settings.trustedOrigin}
          request: 
            parameters: 
              paths: 
                id: true

# Response types are listed here
# https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
resources:
  Resources:

    # Handle UNAUTHORIZED errors, meaning the token is missing
    MissingTokenGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.WWW-Authenticate: "'Bearer'"
        ResponseType: UNAUTHORIZED
        
        ResponseTemplates:
          application/json: |
            {
              "area": "Authentication",
              "message": "Missing, invalid or expired access token"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    
    # Handle ACCESS_DENIED errors, meaning the token is invalid or expired
    InvalidTokenGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.WWW-Authenticate: "'Bearer'"
        ResponseType: ACCESS_DENIED
        
        ResponseTemplates:
          application/json: |
            {
              "area": "Authentication",
              "message": "Missing, invalid or expired access token"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Handle AUTHORIZER_CONFIGURATION_ERROR errors, meaning a technical problem during token validation
    AuthenticationErrorResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"

        ResponseType: AUTHORIZER_CONFIGURATION_ERROR
        
        # AWS does not support setting runtime context for authentication error responses
        # We can however customize the status code and supply a hard coded error object
        # See comments in responseHandler.ts for further details
        ResponseTemplates:
          application/json: |
            {
              "area": "Authentication",
              "message": "Problem encountered during authorization"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '500'

    # Handle general 500 errors, meaning a technical problem in a lambda
    ServerErrorResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"

        ResponseType: DEFAULT_5XX
        
        # When there is a 500 error we return contextual error data from API Gateway
        ResponseTemplates:
          application/json: |
            {
              "area" : "$context.errorResponse.area",
              "message" : "$context.errorResponse.message",
              "id": "$context.errorResponse.id"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '500'

    # Handle general 400 errors, meaning some kind of invalid request
    ValidationErrorResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"

        ResponseType: DEFAULT_4XX
        
        # When there is a 400 error we return contextual error data from API Gateway
        ResponseTemplates:
          application/json: |
            {
              "area" : "$context.errorResponse.area",
              "message" : "$context.errorResponse.message"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '400'

    # Handle errors for invalid paths within our API, such as /api/xxx
    InvalidApiSubPathResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.config.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.config.settings.trustedOrigin}'"

        ResponseType: MISSING_AUTHENTICATION_TOKEN
        
        # AWS does not support setting runtime context for authentication error responses
        # We can however customize the status code and supply a hard coded error object
        # See comments in responseHandler.ts for further details
        ResponseTemplates:
          application/json: |
            {
              "area": "Path",
              "message": "An invalid API method or path was accessed"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '404'

# By default all files are included so remove files we don't need for any lambda
# The custom packager does the rest of the work in code, including adding node_modules
package:
  exclude:
  - node_modules/**/*
  - src/**
  - scripts/**
  - test/**
  - ts*.json
  - package*.json
  - config.yml

plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager