service: sampleapi

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.environment.settings.deployRegion}
  stage: ${self:custom.environment.settings.stage}
  profile: ${self:custom.environment.settings.profile}

# Environment specific configuration properties go in their own file
# Settings common to all environments are configured in this file
custom:
  environment: ${file(environment.yml)}
  customDomain:
    domainName: api.authguidance-examples.com
    certificateName: '*.authguidance-examples.com'
    basePath: api2
    stage: ${self:custom.environment.settings.stage}
    endpointType: regional
  allowedHeaders:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - x-mycompany-api-client
    - x-mycompany-correlation-id
    - x-mycompany-session-id
    - x-mycompany-test-exception
  scripts:
    hooks:
      'after:package:createDeploymentArtifacts': npm run customPackager

functions:
  # The custom authorizer has extra OAuth related dependencies
  authorizer:
    handler: js/host/authorizer/authorizer.handler
    cors:
      origin: ${self:custom.environment.settings.trustedOrigin}
      headers: ${self:custom.allowedHeaders}
    package:
      individually: true

  # The other lambdas reference the authorizer lambda
  getUserClaims:
    handler: js/host/lambda/getUserClaims.handler
    events:
      - http: 
          path: /userclaims/current
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: ${self:custom.environment.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.environment.settings.trustedOrigin}
            headers: ${self:custom.allowedHeaders}

  getCompanyList:
    handler: js/host/lambda/getCompanyList.handler
    events:
      - http: 
          path: /companies
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: ${self:custom.environment.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.environment.settings.trustedOrigin}
            headers: ${self:custom.allowedHeaders}

  getCompanyTransactions:
    handler: js/host/lambda/getCompanyTransactions.handler
    events:
      - http: 
          path: /companies/{id}/transactions
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: ${self:custom.environment.settings.claimsCacheTtlSeconds}
          cors:
            origin: ${self:custom.environment.settings.trustedOrigin}
            headers: ${self:custom.allowedHeaders}
          request: 
            parameters: 
              paths: 
                id: true

# By default all files are included so remove files we don't need for any lambda
# The custom packager does the rest of the work in code, including adding node_modules
package:
  exclude:
  - src/**
  - test/**
  - node_modules/**
  - deployment/**
  - ts*.json
  - package*.json
  - environment.yml
  - .vscode/**
  - README.md

plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager

# Improve status codes and default messages for authentication responses from API gateway
# We do not try to improve API gateway errors otherwise, since we should rarely receive those errors in normal usage
# https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
# https://gist.github.com/jonatassaraiva/4c33dd8225605c02318cd71a55b2335d
resources:
  Resources:

    # Handle missing token for an API path that exists
    MissingTokenValidPathGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.environment.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.environment.settings.trustedOrigin}'"
          gatewayresponse.header.WWW-Authenticate: "'Bearer'"

        ResponseType: UNAUTHORIZED
        
        ResponseTemplates:
          application/json: |
            {
              "code": "unauthorized",
              "message": "Missing, invalid or expired access token"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Handle invalid or expired tokens
    InvalidTokenGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.environment.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.environment.settings.trustedOrigin}'"
          gatewayresponse.header.WWW-Authenticate: "'Bearer'"

        ResponseType: ACCESS_DENIED
        
        ResponseTemplates:
          application/json: |
            {
              "code": "unauthorized",
              "message": "Missing, invalid or expired access token"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Handle technical errors during token validation and claims handling
    # Note that for this type of error we cannot customize the response at runtime
    AuthenticationErrorResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.environment.settings.trustedOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'${self:custom.environment.settings.trustedOrigin}'"

        ResponseType: AUTHORIZER_CONFIGURATION_ERROR
        
        ResponseTemplates:
          application/json: |
            {
              "code": "server_error"
              "message": "Problem encountered during authorization"
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '500'
 